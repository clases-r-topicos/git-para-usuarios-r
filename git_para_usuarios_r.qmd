---
# title: "Capacitación en R y herramientas de productividad"
# author: "Abril 2021"
format:
  # html:
  #   code-fold: true
  revealjs:
    auto-stretch: false
    margin: 0
    slide-number: true
    scrollable: true
    preview-links: auto
    page-layout: custom
    logo: imagenes/logo_portada2.png
    css: ine_quarto_styles.css
    # footer: <https://quarto.org>

engine: knitr

---


# 

[<img src="imagenes/logo_portada2.png" width="20%"/>]{.center-justified}

[**INE Educa: Clases abiertas de R**]{.big-par .center-justified}

[**Git para usuarios y usuarias de R**]{.big-par .center-justified}

[**Proyecto Ciencia de Datos**]{.big-par .center-justified}

[**Diciembre 2023**]{.big-par .center-justified}


## Bienvenidas y bienvenidos


[<img src="imagenes/bienvenida.jpg" width="100%" />]{.center-justified}



## Contenidos de la clase {.medium-par}


- ¿Qué es Git y para qué sirve?
- Principales conceptos asociados a Git
- Árbol de commits
- Uso de ramas
- Trabajo remoto
- Conflictos de merge
- El .gitignore
- Casos de uso
- Recomendaciones sobre uso de git


::: fragment
**Objetivo de la clase**

- Mostrar herramientas que permiten el uso básico de git (git clone, git push, git pull) en conjunto con la herramienta Rstudio
:::



## Contenidos de la clase {.medium-par}


[**MUY IMPORTANTE:**]{.big-par-red} 

::: {.incremental }
- La clase no está pensada para ser seguida en vivo. Se recomienda hacerlo cuando 
sea subida a las redes sociales del INE.


- Se recomienda seguir la clase desde computadores personales, pues plataformas como `GitHub` suelen estar
sujetas a bloqueos institucionales.



- La clase se realizará utilizando `GitHub` como plataforma de control de versiones. Es necesario crear una
cuenta para seguir la clase en su totalidad.
  - Otras alternativas: `Gitlab`, `Bitbucket`.
  
- La clase está basada en Sistemas Operativos Windows, sin embargo, no debiesen existir grandes diferencias
al aplicar lo enseñado en Sistemas Mac o Linux.
:::



## ¿Qué es Git y para qué sirve?

:::: r-stack
::: {.fragment .fade-in-then-out}
<img src="imagenes/documento_final.gif" width="70%" />

:::


::: {.fragment .fade-in-then-out}

<img src="imagenes/ml_cycle.webp" width="80%" />

:::

::: {.fragment .fade-in-then-out}
![](imagenes/groupproject.jpg){width=70%}


:::

::: notes
Comentarios fotos:

- A veces ping-poneamos versiones, cambiándole el nombre al archivo lo que puede llevar a 
una pérdida del control de la información -quizás alguien está trabajando sobre una versión
que no contiene todos los cambios-

- En proyectos de naturaleza experimental nos gustaría tener el control de nuestros distintos
experimentos

- En proyectos grupales, nos gustaría saber quién hizo qué y cuándo, para poder trazar bien su
evolución.



:::

::::

## ¿Qué es Git y para qué sirve? {.medium-par}

::: {.fragment } 
Es un sistema de control de versiones (VCS).

  - Permiten a personas o equipos administrar los cambios del código de un proyecto en el tiempo.
:::

::: fragment
Funciona como una máquina del tiempo

- Cada cierto tiempo sacamos una "foto" del estado de todos los archivos del proyecto

- Estas fotos no desaparecen

- Siempre es posible volver a una foto anterior

- Incluyen nombre y fecha de quién sacó la foto, además de un mensaje explicativo de 
qué cambios incluye

Permite que varias personas trabajen en un mismo proyecto sin molestarse unos a otros
::: 

::: fragment
![](imagenes/version_control.png){width=70%}
[ <font size="2"> Ilustración por Sara A. Metwalli, https://saraametwalli.medium.com/</font> ]{.pull-right}
:::

::: notes

- Comentario foto: tal vez esto ahora no hace mucho sentido, pero al final de la clase
debiesen entender este diagrama.

:::


## ¿Qué es Git y para qué sirve? {.medium-par}


**Nos protege:**

::: incremental
- De nuestros propios errores

- De fallas en el almacenamiento físico (podemos sincronizar nuestros cambios en la nube)

:::

::: fragment
<img src="imagenes/git.png" width="140" />

[Descargar aquí](https://git-scm.com/downloads)
:::




::: fragment
**Veamos rápidamente cómo instalarlo**
:::


:::notes
Detalles relevantes:

- Selección de editor de texto
- Mencionar tema de nombres de rama principal
- Mencionar usar segunda opción para el tema PATH
- Mantener SSH que viene con git
- Mantener OpenSSL
- Mantener MinTTY
- Setear fast-forward para git pull




:::






## ¿Qué es Git y para qué sirve? {.medium-par}

::: fragment
<img src="imagenes/esquema_reproducibilidad.png" width="800" />



Nos acercamos a la reproducibilidad
:::

::: fragment
Aún nos falta manejar las dependencias para llegar al estándar dorado (sistemas como
[Docker](https://www.docker.com/) nos permiten llegar ahí)
:::




## ¿Qué es Git y para qué sirve? {.medium-par}



**¿Cuándo sirve?**

::: incremental
- Proyectos de código de naturaleza no lineal (ciclos de experimentación, código que evoluciona e itera, etc).
- Proyectos de código colaborativo.
:::

::: fragment
**¿Cuándo [no]{.red} sirve?**
:::

::: incremental
- Proyectos de desarrollo lineal (no hay necesidad de volver atrás).
- Proyectos cuyos documentos principales (scripts o documentaciones) no estén basados en texto plano (por ejemplo, archivos .docx de Microsoft Word).
- Proyectos de muy baja complejidad (el costo de implementarlo resulta mayor al beneficio).

:::

::: fragment

**Pequeña excepción:** si queremos hacer público un proyecto, aunque no cumpla con las condiciones, las plataformas como Github son una buena forma de hacerlo.
:::




::: fragment

![](imagenes/blob.jpg){height=150}
:::

::: notes
- Tema de documento principal es para no confundir con formatos tipo .csv, que son texto plano, pero tampoco sirven en 
control de versiones.

:::



## Principales conceptos {.medium-par}

Git nos permite navegar de manera "sencilla" por las distintas versiones de un archivo


![](imagenes/diagrama.png){width=300}


**Podemos rastrear dónde y cuándo se producen los errores**


![](imagenes/pikachu.png){width=300}









## Estados en Git {.medium-par}


<img src="imagenes/estados-git.png" width="500" />


Tenemos 3 estados para nuestros archivos:

- Modificado

- "En escena" (*staging area*)

- Confirmado o comprometido (*committed*)


::: notes
- Mencionar que uno puede tener cambios en varios archivos al mismo tiempo y no necesariamente
quiere juntarlos todos en un commit (puede ser demasiada información). Por esto existe un paso intermedio
antes del commit.

:::


## El mueble {.medium-par}
::::r-stack

::: {.fragment fragment-index=1}
![](imagenes/escritorio_plan.png){width=100%}
:::

::: {.fragment fragment-index=3}
![](imagenes/escritorio_commit1.png){width=100%}

:::

::: {.fragment fragment-index=5}
![](imagenes/escritorio_commit1b.png){width=100%}

:::

::::

::: {.fragment fragment-index=2}
- Para aterrizar los conceptos usaremos el proyecto de creación de un escritorio como analogía.

- En este momento nuestro escritorio es solo un plan: un repositorio vacío.
  - Tenemos una idea de qué queremos construir, pero no sabemos el camino exacto: materiales, colores, formas pueden ir cambiando en el camino.

- En la medida en que vayamos avanzando iremos haciendo _commits_ que guarden nuestro progreso.

- Por ejemplo, luego de tomar una tabla, cortarla, barnizarla, etc, tenemos nuestro primer hito: tenemos una pata lista. 

  - Este podría ser merecedor de un primer _commit_!

:::

::: {.fragment fragment-index=4}

- Tal vez querríamos guardar nuestro progreso antes del barnizado. En ese caso nuestro _commit_ sería antes

:::
::: {.fragment fragment-index=6}
- Esto nos permitiría **volver atrás** y cambiar el color del barniz si nos arrepentimos en algún momento.
:::





## Principales conceptos {.medium-par}

Ciclos sucesivos de *modificar, poner en escena y confirmar* van generando el historial de cambios de nuestro repositorio



Cada _commit_ es una foto del estado de nuestros archivos a la que podemos acceder cuando queramos



- **NO** podemos acceder a estados intermedios entre dos _commit_



- Queremos hacer _commit_ frecuentemente y con un número de cambios manejable

:::: {layout-ncol=3}

::: {.fragment }
![Commit 1](imagenes/escritorio_commit1b.png){width=10%}

:::

::: {.fragment }
![](imagenes/escritorio_commit1c.png){width=10%}
:::


::: {.fragment }
![Commit 2](imagenes/escritorio_commit1.png){width=10%}
:::

::::



:::fragment

**Creemos nuestro primer repositorio en RStudio y realicemos nuestros `commit` iniciales!**

:::


::: notes

- La parte de la pata se llama tope
- Creamos proyecto git desde RStudio (File->New Project)
- Ser claro en que es pseudo-código, que la idea es pasa bastante tiempo entre commit y commit
y que es un proyecto complejo.


:::


## El árbol de commits {.medium-par}


<div style="float: right;">
<img src="imagenes/arbol_commit1.gif" width="80%" />
</div>

::: fragment
El árbol de commits es una representación visual de la historia de nuestro proyecto.
:::

::: fragment
Nos muestra cada commit, nos permite acceder a sus contenidos y nos muestra dónde nos encontramos actualmente en la historia del árbol y dónde se encuentran las otras ramas, en caso de existir.
:::

::: fragment
**¿Qué es una rama?** Simplemente es un puntero a un `commit` específico, que contiene la información de sus ancestros (commits anteriores a este). 
:::


## El árbol de commits {.medium-par}


<div style="float: right;">
<img src="imagenes/arbol_commit2.gif" width="80%" />
</div>


El árbol de commits es una representación visual de la historia de nuestro proyecto.



Nos muestra cada commit, nos permite acceder a sus contenidos y nos muestra dónde nos encontramos actualmente en la historia del árbol y dónde se encuentran las otras ramas, en caso de existir.



**¿Qué es una rama?** 
Simplemente es un puntero a un `commit` específico, que contiene la información de sus ancestros (commits anteriores a este). 


Si nos encontramos parados en una rama y realizamos un `commit` el puntero de la rama se moverá al commit más reciente.






## El árbol de commits {.medium-par}



<div style="float: right;">
<img src="imagenes/arbol_commit3.gif" width="80%" />
</div>


El árbol de commits es una representación visual de la historia de nuestro proyecto.



Nos muestra cada commit, nos permite acceder a sus contenidos y nos muestra dónde nos encontramos actualmente en la historia del árbol y dónde se encuentran las otras ramas, en caso de existir.



**¿Qué es una rama?** 
Simplemente es un puntero a un `commit` específico, que contiene la información de sus ancestros (commits anteriores a este). 


 Si nos encontramos parados en una rama y realizamos un `commit` el puntero de la rama se moverá al commit más reciente.

La rama principal se llama main o master, que aloja la versión oficial de nuestro proyecto, pero podemos crear tantas como queramos

::: fragment
Cada rama es independiente en este sentido, por lo que los cambios que aquí se realicen no estarán 
presentes en la rama principal hasta que uno lo decida

:::

## El árbol de commits {.medium-par}



<div style="float: right;">
<img src="imagenes/arbol_commit4.gif" width="80%" />
</div>


El árbol de commits es una representación visual de la historia de nuestro proyecto.



Nos muestra cada commit, nos permite acceder a sus contenidos y nos muestra dónde nos encontramos actualmente en la historia del árbol y dónde se encuentran las otras ramas, en caso de existir.



**¿Qué es una rama?** 
Simplemente es un puntero a un `commit` específico, que contiene la información de sus ancestros (commits anteriores a este). 


 Si nos encontramos parados en una rama y realizamos un `commit` el puntero de la rama se moverá al commit más reciente.

La rama principal se llama main o master, que aloja la versión oficial de nuestro proyecto, pero podemos crear tantas como queramos

Cada rama es independiente en este sentido, por lo que los cambios que aquí se realicen no estarán 
presentes en la rama principal hasta que uno lo decida

Todo software compatible con `git` presenta alguna forma de acceder a este árbol; en Rstudio se encuentra en Tools -> Version control -> History.





## El árbol de commits {.medium-par}



<div style="float: right;">
<img src="imagenes/arbol_commit5.gif" width="80%" />
</div>


El árbol de commits es una representación visual de la historia de nuestro proyecto.



Nos muestra cada commit, nos permite acceder a sus contenidos y nos muestra dónde nos encontramos actualmente en la historia del árbol y dónde se encuentran las otras ramas, en caso de existir.



**¿Qué es una rama?** 
Simplemente es un puntero a un `commit` específico, que contiene la información de sus ancestros (commits anteriores a este). 


 Si nos encontramos parados en una rama y realizamos un `commit` el puntero de la rama se moverá al commit más reciente.

La rama principal se llama main o master, que aloja la versión oficial de nuestro proyecto, pero podemos crear tantas como queramos

Cada rama es independiente en este sentido, por lo que los cambios que aquí se realicen no estarán 
presentes en la rama principal hasta que uno lo decida

Todo software compatible con `git` presenta alguna forma de acceder a este árbol; en Rstudio se encuentra en Tools -> Version control -> History.


::: fragment
**¡Veamos el árbol de _commits_ de nuestro proyecto actual!**
:::



## Trabajando con ramas {.medium-par}

::: incremental

- Es la forma más segura de trabajar en git: nuestro trabajo no tocará la rama principal hasta que lo decidamos



- Cada persona desarrolladora puede trabajar en una rama independiente, sin molestar a los demás



- En proyectos grandes, quienes desarrollan el proyecto, **en general**, no tienen permiso para empujar directamente a la rama main/master, tienen que "pedir permiso" para hacerlo



- Existe una persona administradora encargada de revisar y unir (`merge`) las contribuciones a la rama central

  - Decide si el aporte debe incorporarse

  - Resuelve conflictos



- Por ahora nos centraremos en el caso básico en que tenemos total libertad subir nuestros cambios (más detalles en la sección de trabajo remoto).

:::


## Trabajando con ramas {.medium-par}
:::: r-stack

::: {.fragment fragment-index=3 .fade-in-then-out}
![Plan original (rama main)](imagenes/escritorio_commit3.png)
:::

::: {.fragment fragment-index=4 .fade-in-then-out}
![Nuevo plan (rama prueba_cajon_redondo)](imagenes/escritorio_rama1.png)
:::

::: {.fragment fragment-index=5 .fade-in-then-out}
![Nuevo plan commit #1 (rama prueba_cajon_redondo)](imagenes/escritorio_rama2.png)
:::

::: {.fragment fragment-index=6 .fade-in-then-out}
![Nuevo plan commit #2 (rama prueba_cajon_redondo)](imagenes/escritorio_rama3.png)
:::

::: {.fragment fragment-index=7 .fade-in}
![Plan original (rama main)](imagenes/escritorio_commit3.png)
:::


::::


::: {.fragment fragment-index=1 }
Por otro lado, las ramas son particularmente útiles en un contexto experimental: queremos probar una variación y no estamos
seguros si será incorporada o no.
:::

::: {.fragment fragment-index=2 }
Volvamos a nuestro mueble. Digamos que su estado de avance es el siguiente:
:::



::: {.fragment fragment-index=4 }
Sin embargo, se nos ocurre innovar y probar un nuevo tipo de cajón
:::

::: {.fragment fragment-index=5 }
Avanzamos en nuestros commits
:::

::: {.fragment fragment-index=6 }
Terminamos nuestro experimento y vemos que no nos resultó satisfactorio
:::

::: {.fragment fragment-index=7 }
Podemos volver sin problemas a nuestro commit inicial y abandonar nuestra rama
:::


::: fragment
Si quiero trabajar de manera individual, no necesito más que lo que hemos visto hasta ahora
:::

::: fragment

**¡Probemos en RStudio cómo crear nuestras primeras ramas!**
:::


::: notes

- se llama manilla la parte del cajón donde lo agarro.

- se llama tablero la parte donde apoyo cosas

- invitar a ver el curso de git básico si no entiende la sintaxis

:::


## Trabajo remoto {.medium-par}


**¿Qué pasa si necesito trabajar con más personas? ¿Si quiero un respaldo online de mi trabajo?**

::: fragment
<img src="imagenes/diagrama-git.png" width="600" /> 



**Gitlab, Github, etc se usan para trabajar con más personas, agregando el concepto
del repositorio remoto**

:::

## Trabajo remoto

<img src="imagenes/flujo_git.png" width="480" /> 
[ <font size="2"> Ilustración por Allison Horst, https://allisonhorst.com/git-github</font> ]{.pull-right}





## Repositorio remoto {.medium-par}


<img src="imagenes/diagrama-colaborativo.png" width="600" />



**Varias personas aportan a un mismo repositorio**

::: {layout-ncol=2}

::: fragment
![](imagenes/logos.png){width=20%}
:::

::: fragment
![](imagenes/logo_distinto.png){width=20%}
:::

:::








## Esquema de trabajo en Git {.medium-par}

Luego de hacer nuestros _commit_, usualmente vamos a querer enviarlos al repositorio
remoto para que el resto pueda verlos a través de un _push_



Antes de hacer un _push_, es necesario actualizar nuestro proyecto con los cambios que otros/as colegas puedan haber realizado desde la última vez que nos sincronizamos con el repositorio remoto. Para esto, usamos `git pull`



Si es que fue posible traer los cambios remotos **sin problemas** y teniendo seguridad que nuestro código funciona, procedemos a empujar nuestros cambios con un `git push`



Por lo tanto, el flujo normal de trabajo es siempre:


::: {.fragment .big-par}
**commit - pull - push**
:::

::: fragment
![](imagenes/no_olvidar.png){.pull-left width=23%}

:::

::: {.fragment .pull-right} 

**Veamos cómo crear y clonar un repositorio remoto en Github**

:::


::: notes

- Ir a Github
- Crear repo
- Mostrar cómo clonar con SSH
- Mostrar cómo clonar con Token


:::


## ¿Sin problemas? {.medium-par}

::: fragment
Al hacer `pull` traemos los cambios que han hecho el resto de colegas a nuestro
repositorio local y `git` trata de incorporarlo con los `commit` que hemos realizado
desde la última vez que hicimos `pull`. A esto se le llama `merge`.
:::

::: fragment
Si los cambios que existen en nuestros `commit` no tienen intersección con los de
los `commit` de nuestros colegas, no habrá problema. Dos casos:
:::

::: fragment
- Cambios en archivos diferentes
:::

::: fragment
- Cambios en el mismo archivo, pero distintas líneas
:::

::: fragment
Ahora, si nuestros `commit` y algún `commit` recibido en el `pull` cambian la misma
línea de un archivo, tendremos [problemas]{.red}: un conflicto de _merge_.
:::


::: fragment
<img src="imagenes/git_merge.gif" width="35%" />
:::



## Conflicto de merge {.medium-par}

::: fragment
<div style="float: left;">
<img src="imagenes/merge_conflict1.png" width="90%" />
</div>


<-- Su script se verá similar a esto
:::



::: fragment
Básicamente `git` nos muestra cómo están las líneas que tienen cambios simultáneos en nuestro repositorio y en el script en el repositorio remoto (o en el de la rama que queremos incorporar a través del `merge`).

Aquí debemos editar el script para que quede funcional, de acuerdo a los objetivos del proyecto y del script. Para esto no existe receta, podrían mantenerse ambos cambios, uno de los dos o ninguno:
:::


::: fragment
<img src="imagenes/merge_conflict2.png" width="85%" />




Luego de editar el script, es necesario realizar un `commit` y luego un `push` con lo que se soluciona el conflicto de `merge`.
:::

::: fragment
**Nota importante:** cuando hacemos un `pull` con conflicto de `merge`, nos aparecerán todos los cambios al repositorio que ha habido desde la última vez que hicimos `pull`  en la pestaña Git. Solo debemos preocuparnos por los archivos que aparezcan con un símbolo de “U”, que implican que ese archivo específico tiene conflicto de merge.
:::




## Conflicto de merge {.medium-par}

Ejemplo de lo anterior:


<img src="imagenes/merge_conflict3.png" width="85%" />

La terminal también nos indicará los archivos con conflicto:


<img src="imagenes/merge_conflict4.png" width="85%" />


::: fragment
**Probemos cómo generar y resolver un conflicto de merge**
:::






## El .gitignore {.medium-par}

::: fragment
Cuando trabajamos con repositorios remotos, muchas veces existen archivos que queremos mantener solo en nuestro computador o que no son realmente compatibles con un repositorio git, por lo que no queremos subirlos a la nube:
:::

::: fragment
<div style="float: right;">
<img src="imagenes/gitignore.png" width="90%" />
</div>
:::

::: incremental
- Archivos que no son pertinentes al objetivo del proyecto.



- Archivos temporales y de caché.



- Archivos personales (por ejemplo, .Rprofile, scripts de pruebas).



- Archivos muy grandes (por ejemplo, tablas de datos pesadas).
:::

::: fragment
Estos los anotamos en el archivo .gitignore, que es un archivo de texto simple.
::::

::: fragment
**Importante:** .gitignore tiene algunas notaciones particulares, pero lo más relevante es que  el * sirve como comodín
:::


::: fragment
**¡Hagamos pruebas de uso del .gitignore!**
:::



## Casos de uso dentro del INE {.medium-par}

- Un equipo dentro del INE necesitaba reformular la imputación de una de sus variables.
Este era un proceso complejo, por lo que fue necesario el uso de una rama para su desarrollo.

- La marcha blanca de una encuesta contenía scripts que eran diferentes al del resto del procesamiento de la encuesta.
 Para no tener que lidiar con ellos, se optó por marcar el commit final de la marcha blanca con una rama, luego, si era
 necesario volver a esos scripts, bastaba con realizar un `git checkout scripts_mb` para volver a estos.
 
- Luego de sincronizar mi código con lo que está en la nube (`git pull`) cierto código dejó de funcionar. Bastó con revisar
el historial de commits para notar quién había hecho cambios en el script, lo que permitió resolver el problema rápidamente
luego de una conversación.

![](imagenes/proyecto_real.png)


## Recomendaciones sobre cómo interactuar con git {.medium-par}


En esta clase nos centramos en la interacción con git a través de RStudio

Este nos permite acceder a los comandos básicos que revisamos

Sin embargo, si queremos hacer un uso más avanzado de git, tendríamos que usar la consola

Algunos comandos a los que no tenemos acceso desde RStudio: `git merge `, `git tag`, `git cherry-pick`, `git status`, `git reset` (con todas sus opciones)

En particular para el merge de ramas, usar la consola nos resultará inevitable.


## Resumiendo {.medium-par}

::: incremental


- Aprendimos qué es git, cuándo usarlo y cuándo no

- Revisamos conceptos básicos y su aplicación en RStudio: 

  - `add`
  - `commit`
  - `merge`
  - `pull`
  - `push`
  - árboles de commits
  - ramas
  - .gitignore.

- Revisamos algunos casos de uso dentro de las oficinas del INE



::: notes

Si practicamos lo aprendido debiésemos quedar al menos habilitados para un uso básico de git.

Recomendación: practicar, practicar, practicar.

:::

:::



## Comandos más comunes {.medium-par}

**git add .**: poner todo en escena

**git add <nombre_archivo>**: poner `<nombre_archivo>` en escena

**git commit -m "mensaje personalizado"**: confirmar cambios

**git push nombre_rama**: empujar rama al remoto

**git clone url_repositorio**: clonar un repositorio (puede ser por SSH o HTTPS)

**git pull nombre_rama**: traer cambios de rama `nombre_rama` desde el repositorio remoto

**git checkout nombre_rama**: ir a una rama

**git branch**: ver todas las ramas

**git branch nombre_rama**: crear una rama









## Referencias {.medium-par}

[Ciencia Social Abierta - Prof. Juan Carlos Castillo](https://cienciasocialabierta.netlify.app/class/08-class/)

[Documentación oficial de git](https://git-scm.com/doc)

[Guía muy completa en español](https://git-scm.com/book/es/v2)

[Git con enfoque en R](https://happygitwithr.com/)

[Learn Git Branching](https://learngitbranching.js.org/?locale=es_ES)









# 

[<img src="imagenes/logo_portada2.png" width="20%"/>]{.center-justified}

[**INE Educa: Clases abiertas de R**]{.big-par .center-justified}

[**Git para usuarios y usuarias de R**]{.big-par .center-justified}

[**Proyecto Ciencia de Datos**]{.big-par .center-justified}

[**Diciembre 2023**]{.big-par .center-justified}



